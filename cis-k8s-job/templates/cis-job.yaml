apiVersion: batch/v1
kind: Job
metadata:
  name: cis-k8s-job-{{ now | unixEpoch }}
  namespace: {{ .Release.Namespace }}
spec:
  # keep the job for 2 hours after successful completion
  ttlSecondsAfterFinished: 7200
  template:
    metadata:
      name: cis-k8s-job-{{ now | unixEpoch }}
      labels:
        app: cis-k8s-job-{{ now | unixEpoch }}
    spec:
    {{- if or (or (contains "master" .Values.toolConfig.nodeType) (contains "controlplane" .Values.toolConfig.nodeType)) (or (contains "master" .Values.toolConfig.targets) (contains "controlplane" .Values.toolConfig.targets)) }}
      {{- include "masterConfig" .Values.toolConfig | trim | nindent 6 }}
    {{- end }}
      {{- if .Values.registry.secretName }}
      imagePullSecrets:
      - name: {{ .Values.registry.secretName | quote }}
      {{- end }}
      containers:
      - image: "{{ include "cluster_job.image" . }}"
        command: ["/bin/sh", "-c"]
        args: ['/bin/sh entrypoint.sh && ./curl_command.sh']
        name: cis-k8s-cronjob
        resources: {}
        env:
          - name: AUTH_TOKEN
            valueFrom:
              secretKeyRef:
                key: AUTH_TOKEN
                {{- if (.Values.secretName | empty) }}
                name: cis-k8s-job-auth-token
                {{- else }}
                name: {{ .Values.secretName }}
                {{- end }}
          - name: CLUSTER_NAME
            value: {{ .Values.clusterName }}
          - name: LABEL_NAME
            value: {{ .Values.label }}
          - name: CLUSTER_ID
            value: {{ .Values.clusterId }}
          - name: TENANT_ID
            value: {{ .Values.tenantId | quote}}
          - name: URL
            value: {{ .Values.url }}
          - name: CERT_BUNDLE_PATH
            value: {{ .Values.certBundlePath | quote }}
          - name: CERT_BUNDLE_URL
            value: {{ .Values.certBundleURL }}
          - name: USE_INSECURE_CONNECTION
            value: {{ .Values.useInsecureConnection | quote }}
          - name: DATA_TYPE
            value: "KB"
        volumeMounts:
        - mountPath: /data
          name: datapath
      initContainers:
      - image: "{{ include "kubeBench.image" . }}"
        command:
        {{- include "cmd" .Values.toolConfig | trim | nindent 9 }}
        name: kube-bench
        volumeMounts:
        {{- include "volumeMounts" .Values.toolConfig | trim | nindent 9 }}
      hostPID: true
      restartPolicy: Never
      volumes:
      {{- include "volumes" .Values.toolConfig | trim | nindent 7 }}
