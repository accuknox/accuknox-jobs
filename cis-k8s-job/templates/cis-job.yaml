apiVersion: batch/v1
kind: Job
metadata:
  name: cis-k8s-job-{{ now | unixEpoch }}
  namespace: {{ .Release.Namespace }}
spec:
  # keep the job for 2 hours after successful completion
  ttlSecondsAfterFinished: 7200
  template:
    metadata:
      name: cis-k8s-job-{{ now | unixEpoch }}
      labels:
        app: cis-k8s-job-{{ now | unixEpoch }}
    spec:
    {{- if or (or (contains "master" .Values.toolConfig.nodeType) (contains "controlplane" .Values.toolConfig.nodeType)) (or (contains "master" .Values.toolConfig.targets) (contains "controlplane" .Values.toolConfig.targets)) }}
      {{- include "masterConfig" .Values.toolConfig | trim | nindent 6 }}
    {{- end }}

    {{- if .Values.imagePullSecrets.name }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets.name }}
    {{- end }}
      containers:
      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/sh", "-c"]
        args: ['/bin/sh entrypoint.sh && curl --location --request POST "https://${URL}/api/v1/artifact/?tenant_id=${TENANT_ID}&data_type=KB&label_id=${LABEL_NAME}&save_to_s3=true" --header "Tenant-Id: ${TENANT_ID}" --header "Authorization: Bearer ${AUTH_TOKEN}" --form "file=@\"./data/report.json\"" && cat /data/report.json']
        name: cis-k8s-cronjob
        resources: {}
        env:
          - name: AUTH_TOKEN
            valueFrom:
              secretKeyRef:
                key: AUTH_TOKEN
                {{- if (.Values.secretName | empty) }}
                name: cis-k8s-job-auth-token
                {{- else }}
                name: {{ .Values.secretName }}
                {{- end }}
          - name: CLUSTER_NAME
            value: {{ .Values.clusterName }}
          - name: LABEL_NAME
            value: {{ .Values.label }}
          - name: CLUSTER_ID
            value: {{ .Values.clusterId }}
          - name: TENANT_ID
            value: {{ .Values.tenantId | quote}}
          - name: URL
            value: {{ .Values.url }}
        volumeMounts:
        - mountPath: /data
          name: datapath
      initContainers:
      - image: "{{ .Values.kubeBench.image.repository }}:{{ .Values.kubeBench.image.tag }}"
        command:
        {{- include "cmd" .Values.toolConfig | trim | nindent 9 }}
        name: kube-bench
        volumeMounts:
        {{- include "volumeMounts" .Values.toolConfig | trim | nindent 9 }}
      hostPID: true
      restartPolicy: Never
      volumes:
      {{- include "volumes" .Values.toolConfig | trim | nindent 7 }}
